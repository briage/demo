//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./TActivityAdminRemoteService_types');
//HELPER FUNCTIONS AND STRUCTURES

var TActivityAdminRemoteService_createActivity_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TSaveActivityRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_createActivity_args.prototype = {};
TActivityAdminRemoteService_createActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TSaveActivityRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_createActivity_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_createActivity_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_createActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TSaveActivityResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_createActivity_result.prototype = {};
TActivityAdminRemoteService_createActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TSaveActivityResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_createActivity_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_createActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_deleteActivitys_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TDeleteActivityRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_deleteActivitys_args.prototype = {};
TActivityAdminRemoteService_deleteActivitys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TDeleteActivityRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_deleteActivitys_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_deleteActivitys_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_deleteActivitys_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TDeleteActivityResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_deleteActivitys_result.prototype = {};
TActivityAdminRemoteService_deleteActivitys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TDeleteActivityResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_deleteActivitys_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_deleteActivitys_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryActivityByIdList_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TQueryActivityRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_queryActivityByIdList_args.prototype = {};
TActivityAdminRemoteService_queryActivityByIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TQueryActivityRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryActivityByIdList_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryActivityByIdList_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryActivityByIdList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TQueryActivityResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_queryActivityByIdList_result.prototype = {};
TActivityAdminRemoteService_queryActivityByIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TQueryActivityResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryActivityByIdList_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryActivityByIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryGTEndtimeActivityIdList_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TQueryGTEndTimeActivityIdRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_queryGTEndtimeActivityIdList_args.prototype = {};
TActivityAdminRemoteService_queryGTEndtimeActivityIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TQueryGTEndTimeActivityIdRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryGTEndtimeActivityIdList_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryGTEndtimeActivityIdList_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryGTEndtimeActivityIdList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TQueryActivityIdsResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_queryGTEndtimeActivityIdList_result.prototype = {};
TActivityAdminRemoteService_queryGTEndtimeActivityIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TQueryActivityIdsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryGTEndtimeActivityIdList_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryGTEndtimeActivityIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryIdByDate_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TQueryIdByDateRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_queryIdByDate_args.prototype = {};
TActivityAdminRemoteService_queryIdByDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TQueryIdByDateRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryIdByDate_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryIdByDate_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryIdByDate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TQueryIdByDateResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_queryIdByDate_result.prototype = {};
TActivityAdminRemoteService_queryIdByDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TQueryIdByDateResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryIdByDate_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryIdByDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryInventoryIdByActivityName_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TQueryInventoryIdRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_queryInventoryIdByActivityName_args.prototype = {};
TActivityAdminRemoteService_queryInventoryIdByActivityName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TQueryInventoryIdRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryInventoryIdByActivityName_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryInventoryIdByActivityName_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryInventoryIdByActivityName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TQueryInventoryIdsResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_queryInventoryIdByActivityName_result.prototype = {};
TActivityAdminRemoteService_queryInventoryIdByActivityName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TQueryInventoryIdsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryInventoryIdByActivityName_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryInventoryIdByActivityName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryInventoryIds_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TQueryInventoryIdRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_queryInventoryIds_args.prototype = {};
TActivityAdminRemoteService_queryInventoryIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TQueryInventoryIdRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryInventoryIds_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryInventoryIds_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_queryInventoryIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TQueryInventoryIdMapResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_queryInventoryIds_result.prototype = {};
TActivityAdminRemoteService_queryInventoryIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TQueryInventoryIdMapResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_queryInventoryIds_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_queryInventoryIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_searchActivity_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TSearchActivityRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_searchActivity_args.prototype = {};
TActivityAdminRemoteService_searchActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TSearchActivityRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_searchActivity_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_searchActivity_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_searchActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TSearchActivityResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_searchActivity_result.prototype = {};
TActivityAdminRemoteService_searchActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TSearchActivityResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_searchActivity_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_searchActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_searchActivityByRelation_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TAdminSearchByRelationRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_searchActivityByRelation_args.prototype = {};
TActivityAdminRemoteService_searchActivityByRelation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TAdminSearchByRelationRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_searchActivityByRelation_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_searchActivityByRelation_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_searchActivityByRelation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TSearchActivityResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_searchActivityByRelation_result.prototype = {};
TActivityAdminRemoteService_searchActivityByRelation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TSearchActivityResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_searchActivityByRelation_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_searchActivityByRelation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_updateActivity_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TSaveActivityRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_updateActivity_args.prototype = {};
TActivityAdminRemoteService_updateActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TSaveActivityRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_updateActivity_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_updateActivity_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_updateActivity_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TSaveActivityResponse(args.success);
    }
  }
};
TActivityAdminRemoteService_updateActivity_result.prototype = {};
TActivityAdminRemoteService_updateActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TSaveActivityResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_updateActivity_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_updateActivity_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_updateInventoryId_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.TUpdateInventoryIdRequest(args.arg0);
    }
  }
};
TActivityAdminRemoteService_updateInventoryId_args.prototype = {};
TActivityAdminRemoteService_updateInventoryId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.TUpdateInventoryIdRequest();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_updateInventoryId_args.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_updateInventoryId_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteService_updateInventoryId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TBizResult(args.success);
    }
  }
};
TActivityAdminRemoteService_updateInventoryId_result.prototype = {};
TActivityAdminRemoteService_updateInventoryId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TBizResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityAdminRemoteService_updateInventoryId_result.prototype.write = function(output) {
  output.writeStructBegin('TActivityAdminRemoteService_updateInventoryId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityAdminRemoteServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
TActivityAdminRemoteServiceClient.prototype = {};
TActivityAdminRemoteServiceClient.prototype.seqid = function() { return this._seqid; };
TActivityAdminRemoteServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
TActivityAdminRemoteServiceClient.prototype.createActivity = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createActivity(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createActivity(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_createActivity = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createActivity', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_createActivity_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_createActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_createActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createActivity failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.deleteActivitys = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteActivitys(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteActivitys(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_deleteActivitys = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteActivitys', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_deleteActivitys_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_deleteActivitys = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_deleteActivitys_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteActivitys failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.queryActivityByIdList = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryActivityByIdList(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryActivityByIdList(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_queryActivityByIdList = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryActivityByIdList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_queryActivityByIdList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_queryActivityByIdList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_queryActivityByIdList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryActivityByIdList failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.queryGTEndtimeActivityIdList = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryGTEndtimeActivityIdList(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryGTEndtimeActivityIdList(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_queryGTEndtimeActivityIdList = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryGTEndtimeActivityIdList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_queryGTEndtimeActivityIdList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_queryGTEndtimeActivityIdList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_queryGTEndtimeActivityIdList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryGTEndtimeActivityIdList failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.queryIdByDate = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryIdByDate(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryIdByDate(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_queryIdByDate = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryIdByDate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_queryIdByDate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_queryIdByDate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_queryIdByDate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryIdByDate failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.queryInventoryIdByActivityName = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryInventoryIdByActivityName(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryInventoryIdByActivityName(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_queryInventoryIdByActivityName = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryInventoryIdByActivityName', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_queryInventoryIdByActivityName_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_queryInventoryIdByActivityName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_queryInventoryIdByActivityName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryInventoryIdByActivityName failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.queryInventoryIds = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryInventoryIds(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryInventoryIds(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_queryInventoryIds = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryInventoryIds', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_queryInventoryIds_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_queryInventoryIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_queryInventoryIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryInventoryIds failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.searchActivity = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchActivity(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchActivity(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_searchActivity = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchActivity', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_searchActivity_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_searchActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_searchActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchActivity failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.searchActivityByRelation = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchActivityByRelation(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchActivityByRelation(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_searchActivityByRelation = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchActivityByRelation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_searchActivityByRelation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_searchActivityByRelation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_searchActivityByRelation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchActivityByRelation failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.updateActivity = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateActivity(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateActivity(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_updateActivity = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateActivity', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_updateActivity_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_updateActivity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_updateActivity_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateActivity failed: unknown result');
};
TActivityAdminRemoteServiceClient.prototype.updateInventoryId = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateInventoryId(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateInventoryId(arg0);
  }
};

TActivityAdminRemoteServiceClient.prototype.send_updateInventoryId = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateInventoryId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    arg0: arg0
  };
  var args = new TActivityAdminRemoteService_updateInventoryId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TActivityAdminRemoteServiceClient.prototype.recv_updateInventoryId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TActivityAdminRemoteService_updateInventoryId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateInventoryId failed: unknown result');
};
var TActivityAdminRemoteServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
TActivityAdminRemoteServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
TActivityAdminRemoteServiceProcessor.prototype.process_createActivity = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_createActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createActivity.length === 1) {
    Q.fcall(this._handler.createActivity.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_createActivity_result({success: result});
        output.writeMessageBegin("createActivity", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createActivity", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createActivity(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_createActivity_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createActivity", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createActivity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_deleteActivitys = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_deleteActivitys_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteActivitys.length === 1) {
    Q.fcall(this._handler.deleteActivitys.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_deleteActivitys_result({success: result});
        output.writeMessageBegin("deleteActivitys", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteActivitys", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteActivitys(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_deleteActivitys_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteActivitys", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteActivitys", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_queryActivityByIdList = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_queryActivityByIdList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryActivityByIdList.length === 1) {
    Q.fcall(this._handler.queryActivityByIdList.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_queryActivityByIdList_result({success: result});
        output.writeMessageBegin("queryActivityByIdList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryActivityByIdList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryActivityByIdList(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_queryActivityByIdList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("queryActivityByIdList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryActivityByIdList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_queryGTEndtimeActivityIdList = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_queryGTEndtimeActivityIdList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryGTEndtimeActivityIdList.length === 1) {
    Q.fcall(this._handler.queryGTEndtimeActivityIdList.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_queryGTEndtimeActivityIdList_result({success: result});
        output.writeMessageBegin("queryGTEndtimeActivityIdList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryGTEndtimeActivityIdList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryGTEndtimeActivityIdList(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_queryGTEndtimeActivityIdList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("queryGTEndtimeActivityIdList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryGTEndtimeActivityIdList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_queryIdByDate = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_queryIdByDate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryIdByDate.length === 1) {
    Q.fcall(this._handler.queryIdByDate.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_queryIdByDate_result({success: result});
        output.writeMessageBegin("queryIdByDate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryIdByDate", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryIdByDate(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_queryIdByDate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("queryIdByDate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryIdByDate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_queryInventoryIdByActivityName = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_queryInventoryIdByActivityName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryInventoryIdByActivityName.length === 1) {
    Q.fcall(this._handler.queryInventoryIdByActivityName.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_queryInventoryIdByActivityName_result({success: result});
        output.writeMessageBegin("queryInventoryIdByActivityName", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryInventoryIdByActivityName", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryInventoryIdByActivityName(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_queryInventoryIdByActivityName_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("queryInventoryIdByActivityName", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryInventoryIdByActivityName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_queryInventoryIds = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_queryInventoryIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryInventoryIds.length === 1) {
    Q.fcall(this._handler.queryInventoryIds.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_queryInventoryIds_result({success: result});
        output.writeMessageBegin("queryInventoryIds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryInventoryIds", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryInventoryIds(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_queryInventoryIds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("queryInventoryIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryInventoryIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_searchActivity = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_searchActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchActivity.length === 1) {
    Q.fcall(this._handler.searchActivity.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_searchActivity_result({success: result});
        output.writeMessageBegin("searchActivity", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchActivity", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchActivity(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_searchActivity_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("searchActivity", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchActivity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_searchActivityByRelation = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_searchActivityByRelation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchActivityByRelation.length === 1) {
    Q.fcall(this._handler.searchActivityByRelation.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_searchActivityByRelation_result({success: result});
        output.writeMessageBegin("searchActivityByRelation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchActivityByRelation", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchActivityByRelation(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_searchActivityByRelation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("searchActivityByRelation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("searchActivityByRelation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_updateActivity = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_updateActivity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateActivity.length === 1) {
    Q.fcall(this._handler.updateActivity.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_updateActivity_result({success: result});
        output.writeMessageBegin("updateActivity", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateActivity", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateActivity(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_updateActivity_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateActivity", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateActivity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TActivityAdminRemoteServiceProcessor.prototype.process_updateInventoryId = function(seqid, input, output) {
  var args = new TActivityAdminRemoteService_updateInventoryId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateInventoryId.length === 1) {
    Q.fcall(this._handler.updateInventoryId.bind(this._handler), args.arg0)
      .then(function(result) {
        var result_obj = new TActivityAdminRemoteService_updateInventoryId_result({success: result});
        output.writeMessageBegin("updateInventoryId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateInventoryId", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateInventoryId(args.arg0, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TActivityAdminRemoteService_updateInventoryId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateInventoryId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateInventoryId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
