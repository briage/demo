//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var TSaveActivityResponse = module.exports.TSaveActivityResponse = function(args) {
  this.success = null;
  this.message = null;
  this.activityId = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
  }
};
TSaveActivityResponse.prototype = {};
TSaveActivityResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.activityId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveActivityResponse.prototype.write = function(output) {
  output.writeStructBegin('TSaveActivityResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I64, 3);
    output.writeI64(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityRiskInfo = module.exports.TActivityRiskInfo = function(args) {
  this.fingerPrintCheck = null;
  this.riskCheck = null;
  this.riskCheckId = null;
  if (args) {
    if (args.fingerPrintCheck !== undefined && args.fingerPrintCheck !== null) {
      this.fingerPrintCheck = args.fingerPrintCheck;
    }
    if (args.riskCheck !== undefined && args.riskCheck !== null) {
      this.riskCheck = args.riskCheck;
    }
    if (args.riskCheckId !== undefined && args.riskCheckId !== null) {
      this.riskCheckId = args.riskCheckId;
    }
  }
};
TActivityRiskInfo.prototype = {};
TActivityRiskInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.fingerPrintCheck = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.riskCheck = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.riskCheckId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityRiskInfo.prototype.write = function(output) {
  output.writeStructBegin('TActivityRiskInfo');
  if (this.fingerPrintCheck !== null && this.fingerPrintCheck !== undefined) {
    output.writeFieldBegin('fingerPrintCheck', Thrift.Type.I32, 1);
    output.writeI32(this.fingerPrintCheck);
    output.writeFieldEnd();
  }
  if (this.riskCheck !== null && this.riskCheck !== undefined) {
    output.writeFieldBegin('riskCheck', Thrift.Type.I32, 2);
    output.writeI32(this.riskCheck);
    output.writeFieldEnd();
  }
  if (this.riskCheckId !== null && this.riskCheckId !== undefined) {
    output.writeFieldBegin('riskCheckId', Thrift.Type.I32, 3);
    output.writeI32(this.riskCheckId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityShowInfo = module.exports.TActivityShowInfo = function(args) {
  this.showPriceType = null;
  this.hidePreferential = null;
  if (args) {
    if (args.showPriceType !== undefined && args.showPriceType !== null) {
      this.showPriceType = args.showPriceType;
    }
    if (args.hidePreferential !== undefined && args.hidePreferential !== null) {
      this.hidePreferential = args.hidePreferential;
    }
  }
};
TActivityShowInfo.prototype = {};
TActivityShowInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.showPriceType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.hidePreferential = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityShowInfo.prototype.write = function(output) {
  output.writeStructBegin('TActivityShowInfo');
  if (this.showPriceType !== null && this.showPriceType !== undefined) {
    output.writeFieldBegin('showPriceType', Thrift.Type.I32, 1);
    output.writeI32(this.showPriceType);
    output.writeFieldEnd();
  }
  if (this.hidePreferential !== null && this.hidePreferential !== undefined) {
    output.writeFieldBegin('hidePreferential', Thrift.Type.I32, 2);
    output.writeI32(this.hidePreferential);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityInfo = module.exports.TActivityInfo = function(args) {
  this.relationType = null;
  if (args) {
    if (args.relationType !== undefined && args.relationType !== null) {
      this.relationType = args.relationType;
    }
  }
};
TActivityInfo.prototype = {};
TActivityInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.relationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityInfo.prototype.write = function(output) {
  output.writeStructBegin('TActivityInfo');
  if (this.relationType !== null && this.relationType !== undefined) {
    output.writeFieldBegin('relationType', Thrift.Type.I32, 1);
    output.writeI32(this.relationType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSaveActivityBasicParam = module.exports.TSaveActivityBasicParam = function(args) {
  this.id = null;
  this.name = null;
  this.templateId = null;
  this.categoryId = null;
  this.source = null;
  this.priority = null;
  this.preInfoId = null;
  this.inventoryId = null;
  this.startTime = null;
  this.endTime = null;
  this.riskInfo = null;
  this.showInfo = null;
  this.info = null;
  this.creator = null;
  this.onlineStatus = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.preInfoId !== undefined && args.preInfoId !== null) {
      this.preInfoId = args.preInfoId;
    }
    if (args.inventoryId !== undefined && args.inventoryId !== null) {
      this.inventoryId = args.inventoryId;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.riskInfo !== undefined && args.riskInfo !== null) {
      this.riskInfo = new ttypes.TActivityRiskInfo(args.riskInfo);
    }
    if (args.showInfo !== undefined && args.showInfo !== null) {
      this.showInfo = new ttypes.TActivityShowInfo(args.showInfo);
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.TActivityInfo(args.info);
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.onlineStatus !== undefined && args.onlineStatus !== null) {
      this.onlineStatus = args.onlineStatus;
    }
  }
};
TSaveActivityBasicParam.prototype = {};
TSaveActivityBasicParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.templateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.preInfoId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.inventoryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.riskInfo = new ttypes.TActivityRiskInfo();
        this.riskInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.showInfo = new ttypes.TActivityShowInfo();
        this.showInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.TActivityInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.onlineStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveActivityBasicParam.prototype.write = function(output) {
  output.writeStructBegin('TSaveActivityBasicParam');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.I32, 3);
    output.writeI32(this.templateId);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 4);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 5);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 6);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.preInfoId !== null && this.preInfoId !== undefined) {
    output.writeFieldBegin('preInfoId', Thrift.Type.I32, 7);
    output.writeI32(this.preInfoId);
    output.writeFieldEnd();
  }
  if (this.inventoryId !== null && this.inventoryId !== undefined) {
    output.writeFieldBegin('inventoryId', Thrift.Type.I64, 8);
    output.writeI64(this.inventoryId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 9);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 10);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.riskInfo !== null && this.riskInfo !== undefined) {
    output.writeFieldBegin('riskInfo', Thrift.Type.STRUCT, 11);
    this.riskInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.showInfo !== null && this.showInfo !== undefined) {
    output.writeFieldBegin('showInfo', Thrift.Type.STRUCT, 12);
    this.showInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 13);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 14);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.onlineStatus !== null && this.onlineStatus !== undefined) {
    output.writeFieldBegin('onlineStatus', Thrift.Type.I32, 15);
    output.writeI32(this.onlineStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSaveActivityRelationParam = module.exports.TSaveActivityRelationParam = function(args) {
  this.relationType = null;
  this.relationIdListStr = null;
  if (args) {
    if (args.relationType !== undefined && args.relationType !== null) {
      this.relationType = args.relationType;
    }
    if (args.relationIdListStr !== undefined && args.relationIdListStr !== null) {
      this.relationIdListStr = args.relationIdListStr;
    }
  }
};
TSaveActivityRelationParam.prototype = {};
TSaveActivityRelationParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.relationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.relationIdListStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveActivityRelationParam.prototype.write = function(output) {
  output.writeStructBegin('TSaveActivityRelationParam');
  if (this.relationType !== null && this.relationType !== undefined) {
    output.writeFieldBegin('relationType', Thrift.Type.I32, 1);
    output.writeI32(this.relationType);
    output.writeFieldEnd();
  }
  if (this.relationIdListStr !== null && this.relationIdListStr !== undefined) {
    output.writeFieldBegin('relationIdListStr', Thrift.Type.STRING, 2);
    output.writeString(this.relationIdListStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityConditionRelation = module.exports.TActivityConditionRelation = function(args) {
  this.conditionId = null;
  this.conditionValue = null;
  if (args) {
    if (args.conditionId !== undefined && args.conditionId !== null) {
      this.conditionId = args.conditionId;
    }
    if (args.conditionValue !== undefined && args.conditionValue !== null) {
      this.conditionValue = args.conditionValue;
    }
  }
};
TActivityConditionRelation.prototype = {};
TActivityConditionRelation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.conditionId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.conditionValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityConditionRelation.prototype.write = function(output) {
  output.writeStructBegin('TActivityConditionRelation');
  if (this.conditionId !== null && this.conditionId !== undefined) {
    output.writeFieldBegin('conditionId', Thrift.Type.I32, 1);
    output.writeI32(this.conditionId);
    output.writeFieldEnd();
  }
  if (this.conditionValue !== null && this.conditionValue !== undefined) {
    output.writeFieldBegin('conditionValue', Thrift.Type.STRING, 2);
    output.writeString(this.conditionValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSaveActivityConditionParam = module.exports.TSaveActivityConditionParam = function(args) {
  this.conditionRelationList = null;
  if (args) {
    if (args.conditionRelationList !== undefined && args.conditionRelationList !== null) {
      this.conditionRelationList = Thrift.copyList(args.conditionRelationList, [ttypes.TActivityConditionRelation]);
    }
  }
};
TSaveActivityConditionParam.prototype = {};
TSaveActivityConditionParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.conditionRelationList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.TActivityConditionRelation();
          elem6.read(input);
          this.conditionRelationList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveActivityConditionParam.prototype.write = function(output) {
  output.writeStructBegin('TSaveActivityConditionParam');
  if (this.conditionRelationList !== null && this.conditionRelationList !== undefined) {
    output.writeFieldBegin('conditionRelationList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.conditionRelationList.length);
    for (var iter7 in this.conditionRelationList)
    {
      if (this.conditionRelationList.hasOwnProperty(iter7))
      {
        iter7 = this.conditionRelationList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityActionGroupRelation = module.exports.TActivityActionGroupRelation = function(args) {
  this.groupType = null;
  this.configValue = null;
  if (args) {
    if (args.groupType !== undefined && args.groupType !== null) {
      this.groupType = args.groupType;
    }
    if (args.configValue !== undefined && args.configValue !== null) {
      this.configValue = args.configValue;
    }
  }
};
TActivityActionGroupRelation.prototype = {};
TActivityActionGroupRelation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.groupType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityActionGroupRelation.prototype.write = function(output) {
  output.writeStructBegin('TActivityActionGroupRelation');
  if (this.groupType !== null && this.groupType !== undefined) {
    output.writeFieldBegin('groupType', Thrift.Type.I32, 1);
    output.writeI32(this.groupType);
    output.writeFieldEnd();
  }
  if (this.configValue !== null && this.configValue !== undefined) {
    output.writeFieldBegin('configValue', Thrift.Type.STRING, 2);
    output.writeString(this.configValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSaveActivityActionParam = module.exports.TSaveActivityActionParam = function(args) {
  this.actionGroupRelationList = null;
  if (args) {
    if (args.actionGroupRelationList !== undefined && args.actionGroupRelationList !== null) {
      this.actionGroupRelationList = Thrift.copyList(args.actionGroupRelationList, [ttypes.TActivityActionGroupRelation]);
    }
  }
};
TSaveActivityActionParam.prototype = {};
TSaveActivityActionParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.actionGroupRelationList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.TActivityActionGroupRelation();
          elem14.read(input);
          this.actionGroupRelationList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveActivityActionParam.prototype.write = function(output) {
  output.writeStructBegin('TSaveActivityActionParam');
  if (this.actionGroupRelationList !== null && this.actionGroupRelationList !== undefined) {
    output.writeFieldBegin('actionGroupRelationList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.actionGroupRelationList.length);
    for (var iter15 in this.actionGroupRelationList)
    {
      if (this.actionGroupRelationList.hasOwnProperty(iter15))
      {
        iter15 = this.actionGroupRelationList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSaveActivityInventoryParam = module.exports.TSaveActivityInventoryParam = function(args) {
};
TSaveActivityInventoryParam.prototype = {};
TSaveActivityInventoryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveActivityInventoryParam.prototype.write = function(output) {
  output.writeStructBegin('TSaveActivityInventoryParam');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSaveActivityOperatorParam = module.exports.TSaveActivityOperatorParam = function(args) {
  this.misId = null;
  this.name = null;
  if (args) {
    if (args.misId !== undefined && args.misId !== null) {
      this.misId = args.misId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
TSaveActivityOperatorParam.prototype = {};
TSaveActivityOperatorParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.misId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveActivityOperatorParam.prototype.write = function(output) {
  output.writeStructBegin('TSaveActivityOperatorParam');
  if (this.misId !== null && this.misId !== undefined) {
    output.writeFieldBegin('misId', Thrift.Type.STRING, 1);
    output.writeString(this.misId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSaveActivityRequest = module.exports.TSaveActivityRequest = function(args) {
  this.basicParam = null;
  this.relationParam = null;
  this.conditionParam = null;
  this.actionParam = null;
  this.inventoryParam = null;
  this.operatorParam = null;
  this.saveSource = null;
  if (args) {
    if (args.basicParam !== undefined && args.basicParam !== null) {
      this.basicParam = new ttypes.TSaveActivityBasicParam(args.basicParam);
    }
    if (args.relationParam !== undefined && args.relationParam !== null) {
      this.relationParam = new ttypes.TSaveActivityRelationParam(args.relationParam);
    }
    if (args.conditionParam !== undefined && args.conditionParam !== null) {
      this.conditionParam = new ttypes.TSaveActivityConditionParam(args.conditionParam);
    }
    if (args.actionParam !== undefined && args.actionParam !== null) {
      this.actionParam = new ttypes.TSaveActivityActionParam(args.actionParam);
    }
    if (args.inventoryParam !== undefined && args.inventoryParam !== null) {
      this.inventoryParam = new ttypes.TSaveActivityInventoryParam(args.inventoryParam);
    }
    if (args.operatorParam !== undefined && args.operatorParam !== null) {
      this.operatorParam = new ttypes.TSaveActivityOperatorParam(args.operatorParam);
    }
    if (args.saveSource !== undefined && args.saveSource !== null) {
      this.saveSource = args.saveSource;
    }
  }
};
TSaveActivityRequest.prototype = {};
TSaveActivityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.basicParam = new ttypes.TSaveActivityBasicParam();
        this.basicParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.relationParam = new ttypes.TSaveActivityRelationParam();
        this.relationParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditionParam = new ttypes.TSaveActivityConditionParam();
        this.conditionParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.actionParam = new ttypes.TSaveActivityActionParam();
        this.actionParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.inventoryParam = new ttypes.TSaveActivityInventoryParam();
        this.inventoryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.operatorParam = new ttypes.TSaveActivityOperatorParam();
        this.operatorParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.saveSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveActivityRequest.prototype.write = function(output) {
  output.writeStructBegin('TSaveActivityRequest');
  if (this.basicParam !== null && this.basicParam !== undefined) {
    output.writeFieldBegin('basicParam', Thrift.Type.STRUCT, 1);
    this.basicParam.write(output);
    output.writeFieldEnd();
  }
  if (this.relationParam !== null && this.relationParam !== undefined) {
    output.writeFieldBegin('relationParam', Thrift.Type.STRUCT, 2);
    this.relationParam.write(output);
    output.writeFieldEnd();
  }
  if (this.conditionParam !== null && this.conditionParam !== undefined) {
    output.writeFieldBegin('conditionParam', Thrift.Type.STRUCT, 3);
    this.conditionParam.write(output);
    output.writeFieldEnd();
  }
  if (this.actionParam !== null && this.actionParam !== undefined) {
    output.writeFieldBegin('actionParam', Thrift.Type.STRUCT, 4);
    this.actionParam.write(output);
    output.writeFieldEnd();
  }
  if (this.inventoryParam !== null && this.inventoryParam !== undefined) {
    output.writeFieldBegin('inventoryParam', Thrift.Type.STRUCT, 5);
    this.inventoryParam.write(output);
    output.writeFieldEnd();
  }
  if (this.operatorParam !== null && this.operatorParam !== undefined) {
    output.writeFieldBegin('operatorParam', Thrift.Type.STRUCT, 6);
    this.operatorParam.write(output);
    output.writeFieldEnd();
  }
  if (this.saveSource !== null && this.saveSource !== undefined) {
    output.writeFieldBegin('saveSource', Thrift.Type.I32, 7);
    output.writeI32(this.saveSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDeleteActivityResponse = module.exports.TDeleteActivityResponse = function(args) {
  this.success = null;
  this.message = null;
  this.rowCount = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.rowCount !== undefined && args.rowCount !== null) {
      this.rowCount = args.rowCount;
    }
  }
};
TDeleteActivityResponse.prototype = {};
TDeleteActivityResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rowCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDeleteActivityResponse.prototype.write = function(output) {
  output.writeStructBegin('TDeleteActivityResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I32, 3);
    output.writeI32(this.rowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDeleteActivityRequest = module.exports.TDeleteActivityRequest = function(args) {
  this.activityIdList = null;
  if (args) {
    if (args.activityIdList !== undefined && args.activityIdList !== null) {
      this.activityIdList = Thrift.copyList(args.activityIdList, [null]);
    }
  }
};
TDeleteActivityRequest.prototype = {};
TDeleteActivityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.activityIdList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI64();
          this.activityIdList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDeleteActivityRequest.prototype.write = function(output) {
  output.writeStructBegin('TDeleteActivityRequest');
  if (this.activityIdList !== null && this.activityIdList !== undefined) {
    output.writeFieldBegin('activityIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.activityIdList.length);
    for (var iter23 in this.activityIdList)
    {
      if (this.activityIdList.hasOwnProperty(iter23))
      {
        iter23 = this.activityIdList[iter23];
        output.writeI64(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityBasic = module.exports.TActivityBasic = function(args) {
  this.id = null;
  this.name = null;
  this.templateId = null;
  this.categoryId = null;
  this.source = null;
  this.priority = null;
  this.preInfoId = null;
  this.inventoryId = null;
  this.startTime = null;
  this.endTime = null;
  this.riskInfo = null;
  this.showInfo = null;
  this.info = null;
  this.creator = null;
  this.status = null;
  this.onlineStatus = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.preInfoId !== undefined && args.preInfoId !== null) {
      this.preInfoId = args.preInfoId;
    }
    if (args.inventoryId !== undefined && args.inventoryId !== null) {
      this.inventoryId = args.inventoryId;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.riskInfo !== undefined && args.riskInfo !== null) {
      this.riskInfo = new ttypes.TActivityRiskInfo(args.riskInfo);
    }
    if (args.showInfo !== undefined && args.showInfo !== null) {
      this.showInfo = new ttypes.TActivityShowInfo(args.showInfo);
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.TActivityInfo(args.info);
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.onlineStatus !== undefined && args.onlineStatus !== null) {
      this.onlineStatus = args.onlineStatus;
    }
  }
};
TActivityBasic.prototype = {};
TActivityBasic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.templateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.preInfoId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.inventoryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.riskInfo = new ttypes.TActivityRiskInfo();
        this.riskInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.showInfo = new ttypes.TActivityShowInfo();
        this.showInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.TActivityInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.onlineStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityBasic.prototype.write = function(output) {
  output.writeStructBegin('TActivityBasic');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.I32, 3);
    output.writeI32(this.templateId);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 4);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 5);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 6);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.preInfoId !== null && this.preInfoId !== undefined) {
    output.writeFieldBegin('preInfoId', Thrift.Type.I32, 7);
    output.writeI32(this.preInfoId);
    output.writeFieldEnd();
  }
  if (this.inventoryId !== null && this.inventoryId !== undefined) {
    output.writeFieldBegin('inventoryId', Thrift.Type.I64, 8);
    output.writeI64(this.inventoryId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 9);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 10);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.riskInfo !== null && this.riskInfo !== undefined) {
    output.writeFieldBegin('riskInfo', Thrift.Type.STRUCT, 11);
    this.riskInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.showInfo !== null && this.showInfo !== undefined) {
    output.writeFieldBegin('showInfo', Thrift.Type.STRUCT, 12);
    this.showInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 13);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 14);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 15);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.onlineStatus !== null && this.onlineStatus !== undefined) {
    output.writeFieldBegin('onlineStatus', Thrift.Type.I32, 16);
    output.writeI32(this.onlineStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityRelationConfig = module.exports.TActivityRelationConfig = function(args) {
  this.relationType = null;
  this.relationIdListStr = null;
  if (args) {
    if (args.relationType !== undefined && args.relationType !== null) {
      this.relationType = args.relationType;
    }
    if (args.relationIdListStr !== undefined && args.relationIdListStr !== null) {
      this.relationIdListStr = args.relationIdListStr;
    }
  }
};
TActivityRelationConfig.prototype = {};
TActivityRelationConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.relationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.relationIdListStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityRelationConfig.prototype.write = function(output) {
  output.writeStructBegin('TActivityRelationConfig');
  if (this.relationType !== null && this.relationType !== undefined) {
    output.writeFieldBegin('relationType', Thrift.Type.I32, 1);
    output.writeI32(this.relationType);
    output.writeFieldEnd();
  }
  if (this.relationIdListStr !== null && this.relationIdListStr !== undefined) {
    output.writeFieldBegin('relationIdListStr', Thrift.Type.STRING, 2);
    output.writeString(this.relationIdListStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityView = module.exports.TActivityView = function(args) {
  this.activityBasic = null;
  this.activityRelation = null;
  this.conditionRelationList = null;
  this.actionGroupRelationList = null;
  if (args) {
    if (args.activityBasic !== undefined && args.activityBasic !== null) {
      this.activityBasic = new ttypes.TActivityBasic(args.activityBasic);
    }
    if (args.activityRelation !== undefined && args.activityRelation !== null) {
      this.activityRelation = new ttypes.TActivityRelationConfig(args.activityRelation);
    }
    if (args.conditionRelationList !== undefined && args.conditionRelationList !== null) {
      this.conditionRelationList = Thrift.copyList(args.conditionRelationList, [ttypes.TActivityConditionRelation]);
    }
    if (args.actionGroupRelationList !== undefined && args.actionGroupRelationList !== null) {
      this.actionGroupRelationList = Thrift.copyList(args.actionGroupRelationList, [ttypes.TActivityActionGroupRelation]);
    }
  }
};
TActivityView.prototype = {};
TActivityView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityBasic = new ttypes.TActivityBasic();
        this.activityBasic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityRelation = new ttypes.TActivityRelationConfig();
        this.activityRelation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.conditionRelationList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.TActivityConditionRelation();
          elem30.read(input);
          this.conditionRelationList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.actionGroupRelationList = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new ttypes.TActivityActionGroupRelation();
          elem37.read(input);
          this.actionGroupRelationList.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityView.prototype.write = function(output) {
  output.writeStructBegin('TActivityView');
  if (this.activityBasic !== null && this.activityBasic !== undefined) {
    output.writeFieldBegin('activityBasic', Thrift.Type.STRUCT, 1);
    this.activityBasic.write(output);
    output.writeFieldEnd();
  }
  if (this.activityRelation !== null && this.activityRelation !== undefined) {
    output.writeFieldBegin('activityRelation', Thrift.Type.STRUCT, 2);
    this.activityRelation.write(output);
    output.writeFieldEnd();
  }
  if (this.conditionRelationList !== null && this.conditionRelationList !== undefined) {
    output.writeFieldBegin('conditionRelationList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.conditionRelationList.length);
    for (var iter38 in this.conditionRelationList)
    {
      if (this.conditionRelationList.hasOwnProperty(iter38))
      {
        iter38 = this.conditionRelationList[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actionGroupRelationList !== null && this.actionGroupRelationList !== undefined) {
    output.writeFieldBegin('actionGroupRelationList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.actionGroupRelationList.length);
    for (var iter39 in this.actionGroupRelationList)
    {
      if (this.actionGroupRelationList.hasOwnProperty(iter39))
      {
        iter39 = this.actionGroupRelationList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryActivityResponse = module.exports.TQueryActivityResponse = function(args) {
  this.success = null;
  this.message = null;
  this.activityList = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.activityList !== undefined && args.activityList !== null) {
      this.activityList = Thrift.copyList(args.activityList, [ttypes.TActivityView]);
    }
  }
};
TQueryActivityResponse.prototype = {};
TQueryActivityResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.activityList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.TActivityView();
          elem46.read(input);
          this.activityList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryActivityResponse.prototype.write = function(output) {
  output.writeStructBegin('TQueryActivityResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.activityList !== null && this.activityList !== undefined) {
    output.writeFieldBegin('activityList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityList.length);
    for (var iter47 in this.activityList)
    {
      if (this.activityList.hasOwnProperty(iter47))
      {
        iter47 = this.activityList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryActivityRequest = module.exports.TQueryActivityRequest = function(args) {
  this.activityIdList = null;
  this.templateId = null;
  if (args) {
    if (args.activityIdList !== undefined && args.activityIdList !== null) {
      this.activityIdList = Thrift.copyList(args.activityIdList, [null]);
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
  }
};
TQueryActivityRequest.prototype = {};
TQueryActivityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.activityIdList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readI64();
          this.activityIdList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.templateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryActivityRequest.prototype.write = function(output) {
  output.writeStructBegin('TQueryActivityRequest');
  if (this.activityIdList !== null && this.activityIdList !== undefined) {
    output.writeFieldBegin('activityIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.activityIdList.length);
    for (var iter55 in this.activityIdList)
    {
      if (this.activityIdList.hasOwnProperty(iter55))
      {
        iter55 = this.activityIdList[iter55];
        output.writeI64(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.I32, 2);
    output.writeI32(this.templateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryActivityIdsResponse = module.exports.TQueryActivityIdsResponse = function(args) {
  this.success = null;
  this.message = null;
  this.activityIdList = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.activityIdList !== undefined && args.activityIdList !== null) {
      this.activityIdList = Thrift.copyList(args.activityIdList, [null]);
    }
  }
};
TQueryActivityIdsResponse.prototype = {};
TQueryActivityIdsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.activityIdList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI64();
          this.activityIdList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryActivityIdsResponse.prototype.write = function(output) {
  output.writeStructBegin('TQueryActivityIdsResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.activityIdList !== null && this.activityIdList !== undefined) {
    output.writeFieldBegin('activityIdList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.activityIdList.length);
    for (var iter63 in this.activityIdList)
    {
      if (this.activityIdList.hasOwnProperty(iter63))
      {
        iter63 = this.activityIdList[iter63];
        output.writeI64(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryGTEndTimeActivityIdRequest = module.exports.TQueryGTEndTimeActivityIdRequest = function(args) {
  this.endTime = null;
  this.activityIdList = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.activityIdList !== undefined && args.activityIdList !== null) {
      this.activityIdList = Thrift.copyList(args.activityIdList, [null]);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
TQueryGTEndTimeActivityIdRequest.prototype = {};
TQueryGTEndTimeActivityIdRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.activityIdList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readI64();
          this.activityIdList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryGTEndTimeActivityIdRequest.prototype.write = function(output) {
  output.writeStructBegin('TQueryGTEndTimeActivityIdRequest');
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 1);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.activityIdList !== null && this.activityIdList !== undefined) {
    output.writeFieldBegin('activityIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.activityIdList.length);
    for (var iter71 in this.activityIdList)
    {
      if (this.activityIdList.hasOwnProperty(iter71))
      {
        iter71 = this.activityIdList[iter71];
        output.writeI64(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActivityTemplateIdPair = module.exports.TActivityTemplateIdPair = function(args) {
  this.templateId = null;
  this.activityId = null;
  if (args) {
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
  }
};
TActivityTemplateIdPair.prototype = {};
TActivityTemplateIdPair.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.templateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.activityId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivityTemplateIdPair.prototype.write = function(output) {
  output.writeStructBegin('TActivityTemplateIdPair');
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.I32, 1);
    output.writeI32(this.templateId);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I64, 2);
    output.writeI64(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryIdByDateResponse = module.exports.TQueryIdByDateResponse = function(args) {
  this.success = null;
  this.message = null;
  this.pairList = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.pairList !== undefined && args.pairList !== null) {
      this.pairList = Thrift.copyList(args.pairList, [ttypes.TActivityTemplateIdPair]);
    }
  }
};
TQueryIdByDateResponse.prototype = {};
TQueryIdByDateResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.pairList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.TActivityTemplateIdPair();
          elem78.read(input);
          this.pairList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryIdByDateResponse.prototype.write = function(output) {
  output.writeStructBegin('TQueryIdByDateResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.pairList !== null && this.pairList !== undefined) {
    output.writeFieldBegin('pairList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.pairList.length);
    for (var iter79 in this.pairList)
    {
      if (this.pairList.hasOwnProperty(iter79))
      {
        iter79 = this.pairList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryIdByDateRequest = module.exports.TQueryIdByDateRequest = function(args) {
  this.lastStartTime = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.lastStartTime !== undefined && args.lastStartTime !== null) {
      this.lastStartTime = args.lastStartTime;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
TQueryIdByDateRequest.prototype = {};
TQueryIdByDateRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lastStartTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryIdByDateRequest.prototype.write = function(output) {
  output.writeStructBegin('TQueryIdByDateRequest');
  if (this.lastStartTime !== null && this.lastStartTime !== undefined) {
    output.writeFieldBegin('lastStartTime', Thrift.Type.I64, 1);
    output.writeI64(this.lastStartTime);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 2);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryInventoryIdsResponse = module.exports.TQueryInventoryIdsResponse = function(args) {
  this.success = null;
  this.message = null;
  this.inventoryIdList = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.inventoryIdList !== undefined && args.inventoryIdList !== null) {
      this.inventoryIdList = Thrift.copyList(args.inventoryIdList, [null]);
    }
  }
};
TQueryInventoryIdsResponse.prototype = {};
TQueryInventoryIdsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.inventoryIdList = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readI64();
          this.inventoryIdList.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryInventoryIdsResponse.prototype.write = function(output) {
  output.writeStructBegin('TQueryInventoryIdsResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.inventoryIdList !== null && this.inventoryIdList !== undefined) {
    output.writeFieldBegin('inventoryIdList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.inventoryIdList.length);
    for (var iter87 in this.inventoryIdList)
    {
      if (this.inventoryIdList.hasOwnProperty(iter87))
      {
        iter87 = this.inventoryIdList[iter87];
        output.writeI64(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryInventoryIdRequest = module.exports.TQueryInventoryIdRequest = function(args) {
  this.activityIdList = null;
  this.name = null;
  if (args) {
    if (args.activityIdList !== undefined && args.activityIdList !== null) {
      this.activityIdList = Thrift.copyList(args.activityIdList, [null]);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
TQueryInventoryIdRequest.prototype = {};
TQueryInventoryIdRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.activityIdList = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readI64();
          this.activityIdList.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryInventoryIdRequest.prototype.write = function(output) {
  output.writeStructBegin('TQueryInventoryIdRequest');
  if (this.activityIdList !== null && this.activityIdList !== undefined) {
    output.writeFieldBegin('activityIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.activityIdList.length);
    for (var iter95 in this.activityIdList)
    {
      if (this.activityIdList.hasOwnProperty(iter95))
      {
        iter95 = this.activityIdList[iter95];
        output.writeI64(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TQueryInventoryIdMapResponse = module.exports.TQueryInventoryIdMapResponse = function(args) {
  this.success = null;
  this.message = null;
  this.activityId2InventoryIdMap = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.activityId2InventoryIdMap !== undefined && args.activityId2InventoryIdMap !== null) {
      this.activityId2InventoryIdMap = Thrift.copyMap(args.activityId2InventoryIdMap, [null]);
    }
  }
};
TQueryInventoryIdMapResponse.prototype = {};
TQueryInventoryIdMapResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size96 = 0;
        var _rtmp3100;
        this.activityId2InventoryIdMap = {};
        var _ktype97 = 0;
        var _vtype98 = 0;
        _rtmp3100 = input.readMapBegin();
        _ktype97 = _rtmp3100.ktype;
        _vtype98 = _rtmp3100.vtype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var key102 = null;
          var val103 = null;
          key102 = input.readI64();
          val103 = input.readI64();
          this.activityId2InventoryIdMap[key102] = val103;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryInventoryIdMapResponse.prototype.write = function(output) {
  output.writeStructBegin('TQueryInventoryIdMapResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.activityId2InventoryIdMap !== null && this.activityId2InventoryIdMap !== undefined) {
    output.writeFieldBegin('activityId2InventoryIdMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I64, Thrift.objectLength(this.activityId2InventoryIdMap));
    for (var kiter104 in this.activityId2InventoryIdMap)
    {
      if (this.activityId2InventoryIdMap.hasOwnProperty(kiter104))
      {
        var viter105 = this.activityId2InventoryIdMap[kiter104];
        output.writeI64(kiter104);
        output.writeI64(viter105);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPage = module.exports.TPage = function(args) {
  this.offset = null;
  this.limit = null;
  this.total = null;
  this.hasMore = null;
  if (args) {
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.total !== undefined && args.total !== null) {
      this.total = args.total;
    }
    if (args.hasMore !== undefined && args.hasMore !== null) {
      this.hasMore = args.hasMore;
    }
  }
};
TPage.prototype = {};
TPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.hasMore = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPage.prototype.write = function(output) {
  output.writeStructBegin('TPage');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 1);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 2);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 3);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.hasMore !== null && this.hasMore !== undefined) {
    output.writeFieldBegin('hasMore', Thrift.Type.BOOL, 4);
    output.writeBool(this.hasMore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSearchActivityResponse = module.exports.TSearchActivityResponse = function(args) {
  this.success = null;
  this.message = null;
  this.activityViewList = null;
  this.page = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.activityViewList !== undefined && args.activityViewList !== null) {
      this.activityViewList = Thrift.copyList(args.activityViewList, [ttypes.TActivityView]);
    }
    if (args.page !== undefined && args.page !== null) {
      this.page = new ttypes.TPage(args.page);
    }
  }
};
TSearchActivityResponse.prototype = {};
TSearchActivityResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.activityViewList = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = new ttypes.TActivityView();
          elem112.read(input);
          this.activityViewList.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new ttypes.TPage();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSearchActivityResponse.prototype.write = function(output) {
  output.writeStructBegin('TSearchActivityResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.activityViewList !== null && this.activityViewList !== undefined) {
    output.writeFieldBegin('activityViewList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.activityViewList.length);
    for (var iter113 in this.activityViewList)
    {
      if (this.activityViewList.hasOwnProperty(iter113))
      {
        iter113 = this.activityViewList[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 4);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSearchActivityRequest = module.exports.TSearchActivityRequest = function(args) {
  this.activityId = null;
  this.activityIdList = null;
  this.name = null;
  this.source = null;
  this.templateId = null;
  this.templateIdList = null;
  this.status = null;
  this.priority = null;
  this.preInfoId = null;
  this.startTime = null;
  this.endTime = null;
  this.creator = null;
  this.offset = null;
  this.limit = null;
  this.needRelation = null;
  this.inventoryId = null;
  this.relationList = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.activityIdList !== undefined && args.activityIdList !== null) {
      this.activityIdList = Thrift.copyList(args.activityIdList, [null]);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.templateIdList !== undefined && args.templateIdList !== null) {
      this.templateIdList = Thrift.copyList(args.templateIdList, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.preInfoId !== undefined && args.preInfoId !== null) {
      this.preInfoId = args.preInfoId;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.needRelation !== undefined && args.needRelation !== null) {
      this.needRelation = args.needRelation;
    }
    if (args.inventoryId !== undefined && args.inventoryId !== null) {
      this.inventoryId = args.inventoryId;
    }
    if (args.relationList !== undefined && args.relationList !== null) {
      this.relationList = Thrift.copyList(args.relationList, [null]);
    }
  }
};
TSearchActivityRequest.prototype = {};
TSearchActivityRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.activityId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.activityIdList = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readI64();
          this.activityIdList.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.templateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size121 = 0;
        var _rtmp3125;
        this.templateIdList = [];
        var _etype124 = 0;
        _rtmp3125 = input.readListBegin();
        _etype124 = _rtmp3125.etype;
        _size121 = _rtmp3125.size;
        for (var _i126 = 0; _i126 < _size121; ++_i126)
        {
          var elem127 = null;
          elem127 = input.readI32();
          this.templateIdList.push(elem127);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.preInfoId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.needRelation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.inventoryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.relationList = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readI32();
          this.relationList.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSearchActivityRequest.prototype.write = function(output) {
  output.writeStructBegin('TSearchActivityRequest');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.I64, 1);
    output.writeI64(this.activityId);
    output.writeFieldEnd();
  }
  if (this.activityIdList !== null && this.activityIdList !== undefined) {
    output.writeFieldBegin('activityIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.activityIdList.length);
    for (var iter135 in this.activityIdList)
    {
      if (this.activityIdList.hasOwnProperty(iter135))
      {
        iter135 = this.activityIdList[iter135];
        output.writeI64(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 4);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.I32, 5);
    output.writeI32(this.templateId);
    output.writeFieldEnd();
  }
  if (this.templateIdList !== null && this.templateIdList !== undefined) {
    output.writeFieldBegin('templateIdList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.templateIdList.length);
    for (var iter136 in this.templateIdList)
    {
      if (this.templateIdList.hasOwnProperty(iter136))
      {
        iter136 = this.templateIdList[iter136];
        output.writeI32(iter136);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 8);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.preInfoId !== null && this.preInfoId !== undefined) {
    output.writeFieldBegin('preInfoId', Thrift.Type.I32, 9);
    output.writeI32(this.preInfoId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 10);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 11);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 12);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 13);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 14);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.needRelation !== null && this.needRelation !== undefined) {
    output.writeFieldBegin('needRelation', Thrift.Type.BOOL, 15);
    output.writeBool(this.needRelation);
    output.writeFieldEnd();
  }
  if (this.inventoryId !== null && this.inventoryId !== undefined) {
    output.writeFieldBegin('inventoryId', Thrift.Type.I64, 16);
    output.writeI64(this.inventoryId);
    output.writeFieldEnd();
  }
  if (this.relationList !== null && this.relationList !== undefined) {
    output.writeFieldBegin('relationList', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.I32, this.relationList.length);
    for (var iter137 in this.relationList)
    {
      if (this.relationList.hasOwnProperty(iter137))
      {
        iter137 = this.relationList[iter137];
        output.writeI32(iter137);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAdminSearchByRelationRequest = module.exports.TAdminSearchByRelationRequest = function(args) {
  this.templateIdList = null;
  this.relationList = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.templateIdList !== undefined && args.templateIdList !== null) {
      this.templateIdList = Thrift.copyList(args.templateIdList, [null]);
    }
    if (args.relationList !== undefined && args.relationList !== null) {
      this.relationList = Thrift.copyList(args.relationList, [null]);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
TAdminSearchByRelationRequest.prototype = {};
TAdminSearchByRelationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.templateIdList = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = input.readI32();
          this.templateIdList.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size145 = 0;
        var _rtmp3149;
        this.relationList = [];
        var _etype148 = 0;
        _rtmp3149 = input.readListBegin();
        _etype148 = _rtmp3149.etype;
        _size145 = _rtmp3149.size;
        for (var _i150 = 0; _i150 < _size145; ++_i150)
        {
          var elem151 = null;
          elem151 = input.readI32();
          this.relationList.push(elem151);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAdminSearchByRelationRequest.prototype.write = function(output) {
  output.writeStructBegin('TAdminSearchByRelationRequest');
  if (this.templateIdList !== null && this.templateIdList !== undefined) {
    output.writeFieldBegin('templateIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.templateIdList.length);
    for (var iter152 in this.templateIdList)
    {
      if (this.templateIdList.hasOwnProperty(iter152))
      {
        iter152 = this.templateIdList[iter152];
        output.writeI32(iter152);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relationList !== null && this.relationList !== undefined) {
    output.writeFieldBegin('relationList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.relationList.length);
    for (var iter153 in this.relationList)
    {
      if (this.relationList.hasOwnProperty(iter153))
      {
        iter153 = this.relationList[iter153];
        output.writeI32(iter153);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TBizResult = module.exports.TBizResult = function(args) {
  this.success = null;
  this.message = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
TBizResult.prototype = {};
TBizResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBizResult.prototype.write = function(output) {
  output.writeStructBegin('TBizResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TUpdateInventoryIdRequest = module.exports.TUpdateInventoryIdRequest = function(args) {
  this.inventoryId = null;
  this.activityId = null;
  if (args) {
    if (args.inventoryId !== undefined && args.inventoryId !== null) {
      this.inventoryId = args.inventoryId;
    }
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = Thrift.copyList(args.activityId, [null]);
    }
  }
};
TUpdateInventoryIdRequest.prototype = {};
TUpdateInventoryIdRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.inventoryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.activityId = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = input.readI64();
          this.activityId.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUpdateInventoryIdRequest.prototype.write = function(output) {
  output.writeStructBegin('TUpdateInventoryIdRequest');
  if (this.inventoryId !== null && this.inventoryId !== undefined) {
    output.writeFieldBegin('inventoryId', Thrift.Type.I64, 1);
    output.writeI64(this.inventoryId);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.activityId.length);
    for (var iter161 in this.activityId)
    {
      if (this.activityId.hasOwnProperty(iter161))
      {
        iter161 = this.activityId[iter161];
        output.writeI64(iter161);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

